import tkinter as tk
from tkinter import messagebox

# 계산기 클래스 정의
class Calculator:
    def __init__(self, root):
        self.root = root
        self.root.title("계산기")
        self.root.geometry("400x500")
        self.expression = ""

        # Entry 위젯 - 결과 표시 창
        self.result_var = tk.StringVar()
        self.result_entry = tk.Entry(self.root, textvariable=self.result_var, font=('Arial', 20), bd=10, insertwidth=4, width=14, borderwidth=4)
        self.result_entry.grid(row=0, column=0, columnspan=4)

        # 버튼 생성
        self.create_buttons()

    # 버튼 생성 함수
    def create_buttons(self):
        buttons = [
            '7', '8', '9', '/',
            '4', '5', '6', '*',
            '1', '2', '3', '-',
            'C', '0', '=', '+'
        ]
        row_val = 1
        col_val = 0

        for button in buttons:
            if button == '=':
                btn = tk.Button(self.root, text=button, padx=40, pady=20, font=('Arial', 18), command=self.calculate)
            elif button == 'C':
                btn = tk.Button(self.root, text=button, padx=40, pady=20, font=('Arial', 18), command=self.clear)
            else:
                btn = tk.Button(self.root, text=button, padx=40, pady=20, font=('Arial', 18), command=lambda b=button: self.button_click(b))

            btn.grid(row=row_val, column=col_val)

            col_val += 1
            if col_val > 3:
                col_val = 0
                row_val += 1

    # 버튼 클릭 시 표현식에 추가
    def button_click(self, value):
        self.expression += str(value)
        self.result_var.set(self.expression)

    # 계산 수행
    def calculate(self):
        try:
            result = str(eval(self.expression))
            self.result_var.set(result)
            self.expression = result
        except Exception as e:
            messagebox.showerror("Error", "잘못된 수식입니다.")
            self.clear()

    # 계산기 초기화
    def clear(self):
        self.expression = ""
        self.result_var.set("")


if __name__ == "__main__":
    root = tk.Tk()
    calc = Calculator(root)
    root.mainloop()
